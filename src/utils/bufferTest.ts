/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Buffer ‚Üí base64 ‚Üí Buffer
 * –ü–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
 */

import { logger } from './logger';

export function testBufferConversion(
	originalBuffer: Buffer,
	description: string = 'Buffer',
): boolean {
	try {
		logger.info(
			`üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è ${description}`,
			'BUFFER_TEST',
		);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π Buffer
		if (!Buffer.isBuffer(originalBuffer)) {
			logger.error(
				`‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Buffer: ${typeof originalBuffer}`,
				'BUFFER_TEST',
			);
			return false;
		}

		if (originalBuffer.length === 0) {
			logger.error(`‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π Buffer –ø—É—Å—Ç–æ–π`, 'BUFFER_TEST');
			return false;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º Buffer
		const originalHeader = originalBuffer.subarray(0, 3);
		const originalIsValidJPEG =
			originalHeader[0] === 0xff &&
			originalHeader[1] === 0xd8 &&
			originalHeader[2] === 0xff;

		logger.info(
			`üìã –ò—Å—Ö–æ–¥–Ω—ã–π Buffer: —Ä–∞–∑–º–µ—Ä=${
				originalBuffer.length
			}, JPEG=${originalIsValidJPEG}, –∑–∞–≥–æ–ª–æ–≤–æ–∫=${originalHeader.toString(
				'hex',
			)}`,
			'BUFFER_TEST',
		);

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
		const base64String = originalBuffer.toString('base64');

		if (!base64String || base64String.length === 0) {
			logger.error(`‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64 –¥–∞–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É`, 'BUFFER_TEST');
			return false;
		}

		logger.info(`üìã Base64: –¥–ª–∏–Ω–∞=${base64String.length}`, 'BUFFER_TEST');

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Buffer
		const convertedBuffer = Buffer.from(base64String, 'base64');

		if (!Buffer.isBuffer(convertedBuffer)) {
			logger.error(
				`‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Buffer`,
				'BUFFER_TEST',
			);
			return false;
		}

		if (convertedBuffer.length === 0) {
			logger.error(`‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Buffer –ø—É—Å—Ç–æ–π`, 'BUFFER_TEST');
			return false;
		}

		// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
		if (originalBuffer.length !== convertedBuffer.length) {
			logger.error(
				`‚ùå –†–∞–∑–º–µ—Ä—ã Buffer –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: –∏—Å—Ö–æ–¥–Ω—ã–π=${originalBuffer.length}, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π=${convertedBuffer.length}`,
				'BUFFER_TEST',
			);
			return false;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º Buffer
		const convertedHeader = convertedBuffer.subarray(0, 3);
		const convertedIsValidJPEG =
			convertedHeader[0] === 0xff &&
			convertedHeader[1] === 0xd8 &&
			convertedHeader[2] === 0xff;

		logger.info(
			`üìã –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Buffer: —Ä–∞–∑–º–µ—Ä=${
				convertedBuffer.length
			}, JPEG=${convertedIsValidJPEG}, –∑–∞–≥–æ–ª–æ–≤–æ–∫=${convertedHeader.toString(
				'hex',
			)}`,
			'BUFFER_TEST',
		);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–∞–π—Ç–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
		const areEqual = originalBuffer.equals(convertedBuffer);

		if (!areEqual) {
			logger.error(
				`‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Buffer –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`,
				'BUFFER_TEST',
			);

			// –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ
			for (
				let i = 0;
				i < Math.min(originalBuffer.length, convertedBuffer.length);
				i++
			) {
				if (originalBuffer[i] !== convertedBuffer[i]) {
					logger.error(
						`‚ùå –ü–µ—Ä–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${i}: –∏—Å—Ö–æ–¥–Ω—ã–π=0x${originalBuffer[
							i
						].toString(16)}, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π=0x${convertedBuffer[i].toString(
							16,
						)}`,
						'BUFFER_TEST',
					);
					break;
				}
			}
			return false;
		}

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ base64 –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
		const verificationBase64 = convertedBuffer.toString('base64');

		if (base64String !== verificationBase64) {
			logger.error(
				`‚ùå Base64 —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`,
				'BUFFER_TEST',
			);
			return false;
		}

		logger.info(
			`‚úÖ –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è ${description}`,
			'BUFFER_TEST',
		);
		return true;
	} catch (error) {
		logger.error(
			`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${description}:`,
			'BUFFER_TEST',
			error as Error,
		);
		return false;
	}
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Buffer –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function diagnoseBuffer(
	buffer: any,
	description: string = 'Buffer',
): void {
	logger.info(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ${description}:`, 'BUFFER_DIAG');

	logger.info(`  - –°—É—â–µ—Å—Ç–≤—É–µ—Ç: ${!!buffer}`, 'BUFFER_DIAG');
	logger.info(`  - –¢–∏–ø: ${typeof buffer}`, 'BUFFER_DIAG');
	logger.info(
		`  - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${buffer?.constructor?.name || 'undefined'}`,
		'BUFFER_DIAG',
	);
	logger.info(`  - –Ø–≤–ª—è–µ—Ç—Å—è Buffer: ${Buffer.isBuffer(buffer)}`, 'BUFFER_DIAG');

	if (buffer && typeof buffer === 'object') {
		logger.info(`  - –î–ª–∏–Ω–∞: ${buffer.length || 'undefined'}`, 'BUFFER_DIAG');

		if (Buffer.isBuffer(buffer) && buffer.length > 0) {
			const header = buffer.subarray(0, Math.min(10, buffer.length));
			logger.info(`  - –ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: ${header.toString('hex')}`, 'BUFFER_DIAG');

			const isJPEG =
				buffer.length >= 3 &&
				buffer[0] === 0xff &&
				buffer[1] === 0xd8 &&
				buffer[2] === 0xff;
			logger.info(`  - JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${isJPEG}`, 'BUFFER_DIAG');
		}
	}
}
