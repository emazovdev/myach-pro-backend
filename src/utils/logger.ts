enum LogLevel {
	ERROR = 'error',
	WARN = 'warn',
	INFO = 'info',
	DEBUG = 'debug',
}

interface LogEntry {
	level: LogLevel;
	message: string;
	timestamp: string;
	context?: string;
	error?: any;
}

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è production
const CRITICAL_CONTEXTS = [
	'AUTH',
	'DATABASE',
	'TELEGRAM_BOT',
	'IMAGE_GENERATION',
	'STARTUP',
	'SHUTDOWN',
	'RATE_LIMIT',
	'CACHE',
];

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
const IMPORTANT_KEYWORDS = [
	'–æ—à–∏–±–∫–∞',
	'error',
	'–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
	'auth',
	'–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
	'–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
	'–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞',
	'–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç',
	'–∑–∞–ø—É—â–µ–Ω',
	'–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
	'–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
	'–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ',
];

class Logger {
	private isProduction = process.env.NODE_ENV === 'production';
	private shouldLogDebug = process.env.DEBUG === 'true';

	private isImportantMessage(message: string, context?: string): boolean {
		// –í development –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
		if (!this.isProduction) return true;

		// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º
		if (context && CRITICAL_CONTEXTS.includes(context)) return true;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
		const lowerMessage = message.toLowerCase();
		return IMPORTANT_KEYWORDS.some((keyword) => lowerMessage.includes(keyword));
	}

	private formatLog(entry: LogEntry): string {
		const { level, message, timestamp, context, error } = entry;

		if (this.isProduction) {
			// –ö—Ä–∞—Ç–∫–∏–π JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è production
			return JSON.stringify({
				level,
				message: this.truncateMessage(message),
				timestamp,
				context,
				...(error && { error: this.truncateMessage(error.message) }),
			});
		} else {
			// –ß–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è development
			const prefix = context ? `[${context}]` : '';
			return `${timestamp} ${level.toUpperCase()} ${prefix} ${message}${
				error ? ` - ${error.message}` : ''
			}`;
		}
	}

	private truncateMessage(message: string, maxLength: number = 200): string {
		if (message.length <= maxLength) return message;
		return message.substring(0, maxLength) + '...';
	}

	private log(level: LogLevel, message: string, context?: string, error?: any) {
		// –í production —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		if (this.isProduction && !this.isImportantMessage(message, context)) {
			return;
		}

		// Debug –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Ñ–ª–∞–≥–µ
		if (level === LogLevel.DEBUG && !this.shouldLogDebug) {
			return;
		}

		const entry: LogEntry = {
			level,
			message,
			timestamp: new Date().toISOString(),
			context,
			error,
		};

		const formattedLog = this.formatLog(entry);

		switch (level) {
			case LogLevel.ERROR:
				console.error(formattedLog);
				break;
			case LogLevel.WARN:
				console.warn(formattedLog);
				break;
			case LogLevel.INFO:
				console.log(formattedLog);
				break;
			case LogLevel.DEBUG:
				console.debug(formattedLog);
				break;
		}
	}

	error(message: string, context?: string, error?: any) {
		this.log(LogLevel.ERROR, message, context, error);
	}

	warn(message: string, context?: string) {
		this.log(LogLevel.WARN, message, context);
	}

	info(message: string, context?: string) {
		this.log(LogLevel.INFO, message, context);
	}

	debug(message: string, context?: string) {
		this.log(LogLevel.DEBUG, message, context);
	}

	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
	startup(message: string) {
		this.info(`üöÄ ${message}`, 'STARTUP');
	}

	shutdown(message: string) {
		this.info(`üîª ${message}`, 'SHUTDOWN');
	}

	auth(message: string, userId?: string) {
		this.info(`üîê ${message}${userId ? ` (User: ${userId})` : ''}`, 'AUTH');
	}

	imageGenerated(success: boolean, userId?: string, duration?: number) {
		const status = success
			? '‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ'
			: '‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞';
		const extra = duration ? ` –∑–∞ ${duration}ms` : '';
		const user = userId ? ` (User: ${userId})` : '';
		this.info(`${status}${extra}${user}`, 'IMAGE_GENERATION');
	}

	imageSent(success: boolean, userId?: string, size?: number) {
		const status = success
			? 'üì§ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
			: '‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞';
		const sizeInfo = size ? ` (${(size / 1024 / 1024).toFixed(2)}MB)` : '';
		const user = userId ? ` (User: ${userId})` : '';
		this.info(`${status}${sizeInfo}${user}`, 'TELEGRAM_BOT');
	}

	rateLimitHit(ip: string, endpoint: string, limit: number) {
		this.warn(
			`üö´ Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω: ${ip} –Ω–∞ ${endpoint} (–ª–∏–º–∏—Ç: ${limit})`,
			'RATE_LIMIT',
		);
	}

	performance(message: string, duration?: number) {
		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
		if (duration && duration > 1000) {
			this.warn(
				`‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${message} (${duration}ms)`,
				'PERFORMANCE',
			);
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ verbose –ª–æ–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	silentImageProcess(message: string) {
		// –í production –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
		if (!this.isProduction) {
			this.debug(message, 'IMAGE_WORKER');
		}
	}
}

export const logger = new Logger();
