import TelegramBot from 'node-telegram-bot-api';
import { config } from '../config/env';
import { logger } from '../utils/logger';
import fs from 'fs';
import path from 'path';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å (master) —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç–æ–º –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
 */
export class TelegramBotService {
	private bot: TelegramBot | null = null;
	private isClusterMaster: boolean;

	constructor() {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å master –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
		this.isClusterMaster = !process.env.pm_id || process.env.pm_id === '0';

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ
		if (this.isClusterMaster) {
			logger.info(
				'ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ',
				'TELEGRAM_BOT',
			);
			this.initializeBot();
		} else {
			logger.info(
				`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å ${process.env.pm_id} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –±–æ—Ç–∞`,
				'TELEGRAM_BOT',
			);
		}
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ)
	 */
	private initializeBot() {
		try {
			this.bot = new TelegramBot(config.telegram.botToken, {
				polling: true,
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
				request: {
					url: '',
					agentOptions: {
						keepAlive: true,
						family: 4, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ IPv4
					},
				} as any,
			});

			this.setupCommands();
			this.setupErrorHandlers();

			logger.info('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'TELEGRAM_BOT');
		} catch (error) {
			logger.error(
				'‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:',
				'TELEGRAM_BOT',
				error,
			);
		}
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
	 */
	private setupErrorHandlers() {
		if (!this.bot) return;

		this.bot.on('error', (error) => {
			logger.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', 'TELEGRAM_BOT', error);
		});

		this.bot.on('polling_error', (error) => {
			logger.error('‚ùå –û—à–∏–±–∫–∞ polling Telegram –±–æ—Ç–∞:', 'TELEGRAM_BOT', error);
		});

		// Graceful restart –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
		this.bot.on('webhook_error', (error) => {
			logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook:', 'TELEGRAM_BOT', error);
		});
	}

	/**
	 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
	 */
	private setupCommands() {
		if (!this.bot) return;

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
		this.bot.onText(/\/start/, async (msg) => {
			try {
				const chatId = msg.chat.id;
				const userName =
					msg.from?.username || msg.from?.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

				logger.info(
					`üì± –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName} (${chatId})`,
					'TELEGRAM_BOT',
				);
				await this.sendWebAppButton(chatId);
			} catch (error) {
				logger.error(
					'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:',
					'TELEGRAM_BOT',
					error,
				);
			}
		});

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
		this.bot.on('message', async (msg) => {
			if (msg.text && !msg.text.startsWith('/start')) {
				try {
					const chatId = msg.chat.id;
					await this.sendWebAppButton(chatId);
				} catch (error) {
					logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', 'TELEGRAM_BOT', error);
				}
			}
		});
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	 */
	private async sendWebAppButton(chatId: number) {
		if (!this.bot) {
			logger.warn(
				'‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!',
				'TELEGRAM_BOT',
			);
			return;
		}

		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Telegram (https)
			let messageText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Myach Pro! ‚öΩ';
			let markup: any = {};

			// URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https:// –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp
			if (config.webApp.url.startsWith('https://')) {
				messageText += '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç:';
				const inlineKeyboard = [
					[
						{
							text: 'üéØ –û—Ç–∫—Ä—ã—Ç—å –¢–∏—Ä –õ–∏—Å—Ç',
							web_app: { url: config.webApp.url },
						},
					],
				];
				markup = { reply_markup: { inline_keyboard: inlineKeyboard } };
			} else {
				// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
				messageText += `\n\nüîó –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${config.webApp.url}\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: WebApp –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å HTTPS URL`;
			}

			await this.bot.sendMessage(chatId, messageText, markup);
			logger.info(
				`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`,
				'TELEGRAM_BOT',
			);
		} catch (error) {
			logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', 'TELEGRAM_BOT', error);
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —à—ç—Ä–∏–Ω–≥–∞)
	 */
	public async sendImage(
		chatId: number,
		imageBuffer: Buffer,
		caption?: string,
	): Promise<boolean> {
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ Buffer
		logger.info(
			`üîç TelegramBotService.sendImage –≤—ã–∑–≤–∞–Ω: chatId=${chatId}, buffer —Å—É—â–µ—Å—Ç–≤—É–µ—Ç=${!!imageBuffer}, —Ä–∞–∑–º–µ—Ä=${
				imageBuffer?.length || 0
			}, —Ç–∏–ø=${typeof imageBuffer}`,
			'TELEGRAM_BOT',
		);

		if (!this.bot) {
			logger.warn(
				'‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
				'TELEGRAM_BOT',
			);
			return false;
		}

		// –í–∞–ª–∏–¥–∞—Ü–∏—è Buffer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		if (!imageBuffer || imageBuffer.length === 0) {
			logger.error(
				'‚ùå Buffer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
				'TELEGRAM_BOT',
			);
			return false;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Buffer
		if (!Buffer.isBuffer(imageBuffer)) {
			logger.error(
				`‚ùå –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Buffer: —Ç–∏–ø=${typeof imageBuffer}, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä=${
					(imageBuffer as any)?.constructor?.name
				}`,
				'TELEGRAM_BOT',
			);
			return false;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Buffer —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–µ JPEG –¥–∞–Ω–Ω—ã–µ
		const isValidJPEG = this.validateJPEGBuffer(imageBuffer);
		if (!isValidJPEG) {
			logger.error(
				'‚ùå Buffer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö JPEG –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥',
				'TELEGRAM_BOT',
			);

			// –°—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º Buffer
			try {
				return await this.sendImageViaFile(chatId, imageBuffer, caption);
			} catch (fileError) {
				logger.error(
					'‚ùå –§–∞–π–ª–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:',
					'TELEGRAM_BOT',
					fileError,
				);
				return false;
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const imageSizeMB = imageBuffer.length / (1024 * 1024);
		logger.info(
			`üì∑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSizeMB.toFixed(
				2,
			)}MB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
			'TELEGRAM_BOT',
		);

		// –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
		if (imageSizeMB > 5) {
			logger.warn(
				`‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (${imageSizeMB.toFixed(
					2,
				)}MB), –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π`,
				'TELEGRAM_BOT',
			);
		}

		let attempt = 0;
		const maxAttempts = 3;

		while (attempt < maxAttempts) {
			try {
				attempt++;
				logger.info(
					`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ #${attempt} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
					'TELEGRAM_BOT',
				);

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è —Ä–∞–∑–±–∏–≤–∞–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
				const result = await new Promise<boolean>((resolve, reject) => {
					setTimeout(async () => {
						try {
							if (!this.bot) {
								throw new Error('–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
							}

							// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
							const inlineKeyboard = [];

							// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞, –µ—Å–ª–∏ URL –¥–æ—Å—Ç—É–ø–µ–Ω
							if (config.webApp.url.startsWith('https://')) {
								inlineKeyboard.push([
									{
										text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç',
										web_app: { url: config.webApp.url },
									},
								]);
							}

							await this.bot.sendPhoto(chatId, imageBuffer, {
								caption: caption || '–í–∞—à —Ç–∏—Ä-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤! üéØ',
								reply_markup: {
									inline_keyboard: inlineKeyboard,
								},
							});

							logger.info(
								`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`,
								'TELEGRAM_BOT',
							);
							resolve(true);
						} catch (error) {
							reject(error);
						}
					}, attempt * 1000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
				});

				return result;
			} catch (error) {
				const errorMessage =
					error instanceof Error ? error.message : String(error);

				logger.error(
					`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}):`,
					'TELEGRAM_BOT',
					error,
				);

				// –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å Buffer file-type –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
				if (
					errorMessage.includes('Maximum call stack size exceeded') ||
					errorMessage.includes('Unsupported Buffer file-type') ||
					errorMessage.includes('EFATAL')
				) {
					logger.warn(
						`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Buffer/—Å—Ç–µ–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ —Ñ–∞–π–ª`,
						'TELEGRAM_BOT',
					);

					try {
						const fileResult = await this.sendImageViaFile(
							chatId,
							imageBuffer,
							caption,
						);
						if (fileResult) {
							logger.info(
								`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Buffer`,
								'TELEGRAM_BOT',
							);
							return true;
						}
					} catch (fileError) {
						logger.error(
							'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª:',
							'TELEGRAM_BOT',
							fileError,
						);
					}

					if (attempt < maxAttempts) {
						await new Promise((resolve) => setTimeout(resolve, attempt * 2000));
						continue;
					}
				}

				// –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–∞
				if (attempt >= maxAttempts) {
					logger.error(
						`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`,
						'TELEGRAM_BOT',
					);
					return false;
				}

				// –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
				await new Promise((resolve) => setTimeout(resolve, 1000 * attempt));
			}
		}

		return false;
	}

	/**
	 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —á—Ç–æ Buffer —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JPEG –¥–∞–Ω–Ω—ã–µ
	 */
	private validateJPEGBuffer(buffer: Buffer): boolean {
		try {
			if (!buffer || buffer.length < 10) {
				return false;
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫ (FF D8 FF)
			const jpegHeader = buffer.subarray(0, 3);
			const isJPEG =
				jpegHeader[0] === 0xff &&
				jpegHeader[1] === 0xd8 &&
				jpegHeader[2] === 0xff;

			if (!isJPEG) {
				logger.error(
					`‚ùå Buffer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JPEG –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${jpegHeader.toString('hex')}`,
					'TELEGRAM_BOT',
				);
				return false;
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG –æ–∫–æ–Ω—á–∞–Ω–∏–µ (FF D9)
			const jpegFooter = buffer.subarray(-2);
			const hasValidEnd = jpegFooter[0] === 0xff && jpegFooter[1] === 0xd9;

			if (!hasValidEnd) {
				logger.warn(
					`‚ö†Ô∏è Buffer –Ω–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JPEG –æ–∫–æ–Ω—á–∞–Ω–∏—è, –Ω–æ –∏–º–µ–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫`,
					'TELEGRAM_BOT',
				);
				// –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å—Ç—å
				return true;
			}

			return true;
		} catch (error) {
			logger.error(
				'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JPEG Buffer:',
				'TELEGRAM_BOT',
				error as Error,
			);
			return false;
		}
	}

	/**
	 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å Buffer
	 */
	private async sendImageViaFile(
		chatId: number,
		imageBuffer: Buffer,
		caption?: string,
	): Promise<boolean> {
		const tempDir = path.join(process.cwd(), 'tmp');
		const tempFileName = `temp_image_${Date.now()}_${Math.random()
			.toString(36)
			.substr(2, 9)}.jpg`;
		const tempFilePath = path.join(tempDir, tempFileName);

		try {
			// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É tmp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
			if (!fs.existsSync(tempDir)) {
				fs.mkdirSync(tempDir, { recursive: true });
			}

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
			fs.writeFileSync(tempFilePath, imageBuffer);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
			if (!fs.existsSync(tempFilePath)) {
				throw new Error('–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
			}

			const fileStats = fs.statSync(tempFilePath);
			if (fileStats.size === 0) {
				throw new Error('–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π');
			}

			if (fileStats.size !== imageBuffer.length) {
				logger.warn(
					`‚ö†Ô∏è –†–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (${fileStats.size}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞–∑–º–µ—Ä–æ–º Buffer (${imageBuffer.length})`,
					'TELEGRAM_BOT',
				);
			}

			logger.info(
				`üíæ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${tempFilePath} (${fileStats.size} –±–∞–π—Ç)`,
				'TELEGRAM_BOT',
			);

			if (!this.bot) {
				throw new Error('–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
			}

			// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
			const inlineKeyboard = [];

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞, –µ—Å–ª–∏ URL –¥–æ—Å—Ç—É–ø–µ–Ω
			if (config.webApp.url.startsWith('https://')) {
				inlineKeyboard.push([
					{
						text: 'üéØ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–∏—Ä-–ª–∏—Å—Ç',
						web_app: { url: config.webApp.url },
					},
				]);
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
			await this.bot.sendPhoto(chatId, tempFilePath, {
				caption: caption || '–í–∞—à —Ç–∏—Ä-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤! üéØ',
				reply_markup: {
					inline_keyboard: inlineKeyboard,
				},
			});

			logger.info(
				`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
				'TELEGRAM_BOT',
			);

			return true;
		} catch (error) {
			logger.error(
				'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–∞–π–ª:',
				'TELEGRAM_BOT',
				error,
			);
			return false;
		} finally {
			// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
			try {
				if (fs.existsSync(tempFilePath)) {
					fs.unlinkSync(tempFilePath);
				}
			} catch (cleanupError) {
				logger.error(
					'‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:',
					'TELEGRAM_BOT',
					cleanupError,
				);
			}
		}
	}

	/**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å null –≤ worker –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö)
	 */
	public getBot(): TelegramBot | null {
		return this.bot;
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
	 */
	public isBotAvailable(): boolean {
		return this.isClusterMaster && this.bot !== null;
	}

	/**
	 * Graceful shutdown –±–æ—Ç–∞
	 */
	public async shutdown(): Promise<void> {
		if (this.bot && this.isClusterMaster) {
			logger.info('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...', 'TELEGRAM_BOT');
			try {
				await this.bot.stopPolling();
				logger.info('‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'TELEGRAM_BOT');
			} catch (error) {
				logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', 'TELEGRAM_BOT', error);
			}
		}
	}
}
