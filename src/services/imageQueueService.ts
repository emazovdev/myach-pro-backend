import { Worker } from 'worker_threads';
import path from 'path';
import { EventEmitter } from 'events';
import { logger } from '../utils/logger';

interface ImageGenerationTask {
	id: string;
	html: string;
	width: number;
	height: number;
	quality: number;
	optimizeForSpeed: boolean;
	resolve: (buffer: Buffer) => void;
	reject: (error: Error) => void;
	createdAt: number;
}

interface WorkerInfo {
	worker: Worker;
	busy: boolean;
	currentTaskId?: string;
	tasksCompleted: number;
}

/**
 * –°–µ—Ä–≤–∏—Å –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—É–ª–æ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
 */
export class ImageQueueService extends EventEmitter {
	private static instance: ImageQueueService;
	private workers: WorkerInfo[] = [];
	private taskQueue: ImageGenerationTask[] = [];
	private isInitialized = false;

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
	private readonly MAX_WORKERS = 4; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
	private readonly MAX_QUEUE_SIZE = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
	private readonly TASK_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–¥–∞—á—É
	private readonly WORKER_RESTART_THRESHOLD = 50; // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ—Å–ª–µ 50 –∑–∞–¥–∞—á

	// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	private metrics = {
		tasksCompleted: 0,
		tasksQueued: 0,
		tasksFailed: 0,
		averageExecutionTime: 0,
		queueWaitTime: 0,
	};

	private constructor() {
		super();
		this.setMaxListeners(200); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π
	}

	public static getInstance(): ImageQueueService {
		if (!ImageQueueService.instance) {
			ImageQueueService.instance = new ImageQueueService();
		}
		return ImageQueueService.instance;
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
	 */
	public async initialize(): Promise<void> {
		if (this.isInitialized) return;

		logger.info(
			`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤: ${this.MAX_WORKERS} –≤–æ—Ä–∫–µ—Ä–æ–≤`,
			'IMAGE_QUEUE',
		);

		// –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
		for (let i = 0; i < this.MAX_WORKERS; i++) {
			await this.createWorker(i);
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏
		this.startQueueMonitoring();

		this.isInitialized = true;
		logger.info('‚úÖ –ü—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'IMAGE_QUEUE');
	}

	/**
	 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
	 */
	private async createWorker(index: number): Promise<void> {
		try {
			const workerPath = path.join(__dirname, '../workers/imageWorker.js');
			const worker = new Worker(workerPath);

			const workerInfo: WorkerInfo = {
				worker,
				busy: false,
				tasksCompleted: 0,
			};

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
			worker.on(
				'message',
				(result: {
					success: boolean;
					data?: Buffer;
					error?: string;
					taskId: string;
				}) => {
					this.handleWorkerMessage(workerInfo, result);
				},
			);

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ—Ä–∫–µ—Ä–∞
			worker.on('error', (error) => {
				logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ ${index}:`, 'IMAGE_QUEUE', error);
				this.handleWorkerError(workerInfo, error);
			});

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞
			worker.on('exit', (code) => {
				logger.warn(
					`üîÑ –í–æ—Ä–∫–µ—Ä ${index} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`,
					'IMAGE_QUEUE',
				);
				this.handleWorkerExit(workerInfo);
			});

			this.workers.push(workerInfo);
			logger.info(`‚úÖ –í–æ—Ä–∫–µ—Ä ${index} —Å–æ–∑–¥–∞–Ω`, 'IMAGE_QUEUE');
		} catch (error) {
			logger.error(
				`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ ${index}:`,
				'IMAGE_QUEUE',
				error,
			);
			throw error;
		}
	}

	/**
	 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
	 */
	public async generateImage(
		html: string,
		width: number = 550,
		height: number = 800,
		quality: number = 85,
		optimizeForSpeed: boolean = true,
	): Promise<Buffer> {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
		if (this.taskQueue.length >= this.MAX_QUEUE_SIZE) {
			throw new Error(
				`–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.MAX_QUEUE_SIZE}`,
			);
		}

		return new Promise((resolve, reject) => {
			const taskId = `task_${Date.now()}_${Math.random()
				.toString(36)
				.substr(2, 9)}`;

			const task: ImageGenerationTask = {
				id: taskId,
				html,
				width,
				height,
				quality,
				optimizeForSpeed,
				resolve,
				reject,
				createdAt: Date.now(),
			};

			this.taskQueue.push(task);
			this.metrics.tasksQueued++;

			logger.info(
				`üìã –ó–∞–¥–∞—á–∞ ${taskId} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: ${this.taskQueue.length}`,
				'IMAGE_QUEUE',
			);

			// –ü—ã—Ç–∞–µ–º—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
			this.processQueue();

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
			setTimeout(() => {
				const taskIndex = this.taskQueue.findIndex((t) => t.id === taskId);
				if (taskIndex !== -1) {
					this.taskQueue.splice(taskIndex, 1);
					this.metrics.tasksFailed++;
					reject(new Error('–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
				}
			}, this.TASK_TIMEOUT);
		});
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
	 */
	private processQueue(): void {
		// –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
		const freeWorker = this.workers.find((w) => !w.busy);

		if (!freeWorker || this.taskQueue.length === 0) {
			return;
		}

		const task = this.taskQueue.shift()!;
		freeWorker.busy = true;
		freeWorker.currentTaskId = task.id;

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤–æ—Ä–∫–µ—Ä—É
		try {
			freeWorker.worker.postMessage({
				taskId: task.id,
				html: task.html,
				viewportWidth: task.width,
				viewportHeight: task.height,
				quality: task.quality,
				optimizeForSpeed: task.optimizeForSpeed,
			});

			logger.info(`üéØ –ó–∞–¥–∞—á–∞ ${task.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ—Ä–∫–µ—Ä—É`, 'IMAGE_QUEUE');
		} catch (error) {
			this.handleTaskError(task, error as Error);
			freeWorker.busy = false;
			freeWorker.currentTaskId = undefined;
		}
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
	 */
	private handleWorkerMessage(workerInfo: WorkerInfo, result: any): void {
		const task = this.findTaskById(result.taskId);

		if (!task) {
			logger.warn(
				`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏: ${result.taskId}`,
				'IMAGE_QUEUE',
			);
			return;
		}

		workerInfo.busy = false;
		workerInfo.currentTaskId = undefined;
		workerInfo.tasksCompleted++;

		if (result.success && result.data) {
			const executionTime = Date.now() - task.createdAt;
			this.updateMetrics(executionTime);

			task.resolve(result.data);
			logger.info(
				`‚úÖ –ó–∞–¥–∞—á–∞ ${task.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${executionTime}–º—Å`,
				'IMAGE_QUEUE',
			);
		} else {
			this.metrics.tasksFailed++;
			task.reject(new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞'));
			logger.error(
				`‚ùå –ó–∞–¥–∞—á–∞ ${task.id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${result.error}`,
				'IMAGE_QUEUE',
			);
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–∞
		if (workerInfo.tasksCompleted >= this.WORKER_RESTART_THRESHOLD) {
			this.restartWorker(workerInfo);
		}

		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
		this.processQueue();
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ—Ä–∫–µ—Ä–∞
	 */
	private handleWorkerError(workerInfo: WorkerInfo, error: Error): void {
		const task = this.findTaskById(workerInfo.currentTaskId);
		if (task) {
			this.handleTaskError(task, error);
		}

		workerInfo.busy = false;
		workerInfo.currentTaskId = undefined;

		// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞
		this.restartWorker(workerInfo);
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞
	 */
	private handleWorkerExit(workerInfo: WorkerInfo): void {
		const index = this.workers.indexOf(workerInfo);
		if (index !== -1) {
			this.workers.splice(index, 1);
			this.createWorker(index).catch((error) => {
				logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞:', 'IMAGE_QUEUE', error);
			});
		}
	}

	/**
	 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
	 */
	private async restartWorker(workerInfo: WorkerInfo): Promise<void> {
		const index = this.workers.indexOf(workerInfo);

		try {
			await workerInfo.worker.terminate();
			this.workers.splice(index, 1);
			await this.createWorker(index);

			logger.info(`üîÑ –í–æ—Ä–∫–µ—Ä ${index} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω`, 'IMAGE_QUEUE');
		} catch (error) {
			logger.error(
				`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ ${index}:`,
				'IMAGE_QUEUE',
				error,
			);
		}
	}

	/**
	 * –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ ID
	 */
	private findTaskById(taskId?: string): ImageGenerationTask | undefined {
		return this.taskQueue.find((task) => task.id === taskId);
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–¥–∞—á–∏
	 */
	private handleTaskError(task: ImageGenerationTask, error: Error): void {
		this.metrics.tasksFailed++;
		task.reject(error);
	}

	/**
	 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
	 */
	private updateMetrics(executionTime: number): void {
		this.metrics.tasksCompleted++;
		this.metrics.averageExecutionTime =
			(this.metrics.averageExecutionTime * (this.metrics.tasksCompleted - 1) +
				executionTime) /
			this.metrics.tasksCompleted;
	}

	/**
	 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏
	 */
	private startQueueMonitoring(): void {
		setInterval(() => {
			const busyWorkers = this.workers.filter((w) => w.busy).length;
			const queueSize = this.taskQueue.length;

			if (queueSize > 0 || busyWorkers > 0) {
				logger.info(
					`üìä –û—á–µ—Ä–µ–¥—å: ${queueSize} –∑–∞–¥–∞—á, –í–æ—Ä–∫–µ—Ä—ã: ${busyWorkers}/${this.workers.length} –∑–∞–Ω—è—Ç—ã`,
					'IMAGE_QUEUE',
				);
			}

			// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏
			if (queueSize > this.MAX_QUEUE_SIZE * 0.8) {
				logger.warn(
					`‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –±–ª–∏–∑–∫–∞ –∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—é: ${queueSize}/${this.MAX_QUEUE_SIZE}`,
					'IMAGE_QUEUE',
				);
			}
		}, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
	 */
	public getMetrics() {
		return {
			...this.metrics,
			queueSize: this.taskQueue.length,
			activeWorkers: this.workers.length,
			busyWorkers: this.workers.filter((w) => w.busy).length,
		};
	}

	/**
	 * Graceful shutdown
	 */
	public async shutdown(): Promise<void> {
		logger.info('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ImageQueueService...', 'IMAGE_QUEUE');

		// –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
		await Promise.all(
			this.workers.map((workerInfo) =>
				workerInfo.worker
					.terminate()
					.catch((error) =>
						logger.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞:', 'IMAGE_QUEUE', error),
					),
			),
		);

		this.workers = [];
		logger.info('‚úÖ ImageQueueService –∑–∞–≤–µ—Ä—à–µ–Ω', 'IMAGE_QUEUE');
	}
}

export const imageQueueService = ImageQueueService.getInstance();
