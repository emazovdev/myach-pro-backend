import { redisService } from './redis.service';
import { logger } from '../utils/logger';

/**
 * –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
 * L1: In-memory cache (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
 * L2: Redis cache (—Ä–∞–∑–¥–µ–ª—è–µ–º—ã–π –º–µ–∂–¥—É –∏–Ω—Å—Ç–∞–Ω—Å–∞–º–∏)
 */
export class CacheService {
	private static instance: CacheService;

	// L1 Cache - In-memory
	private l1Cache: Map<string, { data: any; expiry: number; hits: number }> =
		new Map();

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
	private readonly L1_MAX_SIZE = 10000; // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ L1
	private readonly L1_DEFAULT_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –¥–ª—è L1
	private readonly L2_DEFAULT_TTL = 30 * 60; // 30 –º–∏–Ω—É—Ç –¥–ª—è L2 (Redis)

	// –ú–µ—Ç—Ä–∏–∫–∏
	private metrics = {
		l1Hits: 0,
		l1Misses: 0,
		l2Hits: 0,
		l2Misses: 0,
		evictions: 0,
	};

	private constructor() {
		// –û—á–∏—Å—Ç–∫–∞ L1 –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
		setInterval(() => {
			this.cleanExpiredL1();
		}, 5 * 60 * 1000);

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
		setInterval(() => {
			this.logMetrics();
		}, 10 * 60 * 1000);
	}

	public static getInstance(): CacheService {
		if (!CacheService.instance) {
			CacheService.instance = new CacheService();
		}
		return CacheService.instance;
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ (L1 -> L2)
	 */
	public async get<T>(key: string): Promise<T | null> {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º L1 cache
		const l1Entry = this.l1Cache.get(key);
		if (l1Entry && l1Entry.expiry > Date.now()) {
			l1Entry.hits++;
			this.metrics.l1Hits++;
			return l1Entry.data as T;
		}

		// L1 miss
		this.metrics.l1Misses++;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º L2 cache (Redis)
		try {
			const l2Value = await redisService.get(key);
			if (l2Value) {
				this.metrics.l2Hits++;
				const data = JSON.parse(l2Value) as T;

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ L1 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
				this.setL1(key, data, this.L1_DEFAULT_TTL);

				return data;
			}
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Redis:', 'CACHE', error);
		}

		// L2 miss
		this.metrics.l2Misses++;
		return null;
	}

	/**
	 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à (L1 + L2)
	 */
	public async set<T>(
		key: string,
		value: T,
		l1TtlMs: number = this.L1_DEFAULT_TTL,
		l2TtlSec: number = this.L2_DEFAULT_TTL,
	): Promise<void> {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ L1
		this.setL1(key, value, l1TtlMs);

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ L2 (Redis)
		try {
			await redisService.set(key, JSON.stringify(value), l2TtlSec);
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Redis:', 'CACHE', error);
		}
	}

	/**
	 * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
	 */
	public async delete(key: string): Promise<void> {
		// –£–¥–∞–ª—è–µ–º –∏–∑ L1
		this.l1Cache.delete(key);

		// –£–¥–∞–ª—è–µ–º –∏–∑ L2
		try {
			await redisService.delete(key);
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Redis:', 'CACHE', error);
		}
	}

	/**
	 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
	 */
	public async deletePattern(pattern: string): Promise<void> {
		// –£–¥–∞–ª—è–µ–º –∏–∑ L1 –ø–æ —à–∞–±–ª–æ–Ω—É
		const regex = new RegExp(pattern.replace(/\*/g, '.*'));
		for (const key of this.l1Cache.keys()) {
			if (regex.test(key)) {
				this.l1Cache.delete(key);
			}
		}

		// –£–¥–∞–ª—è–µ–º –∏–∑ L2
		try {
			const keys = await redisService.keys(pattern);
			if (keys.length > 0) {
				await redisService.deleteMany(keys);
			}
		} catch (error) {
			logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ Redis:', 'CACHE', error);
		}
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è (cache-aside pattern)
	 */
	public async getOrSet<T>(
		key: string,
		fetchFunction: () => Promise<T>,
		l1TtlMs: number = this.L1_DEFAULT_TTL,
		l2TtlSec: number = this.L2_DEFAULT_TTL,
	): Promise<T> {
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
		const cached = await this.get<T>(key);
		if (cached !== null) {
			return cached;
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
		const value = await fetchFunction();

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
		await this.set(key, value, l1TtlMs, l2TtlSec);

		return value;
	}

	/**
	 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ L1 –∫—ç—à
	 */
	private setL1<T>(key: string, value: T, ttlMs: number): void {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
		if (this.l1Cache.size >= this.L1_MAX_SIZE) {
			this.evictL1();
		}

		this.l1Cache.set(key, {
			data: value,
			expiry: Date.now() + ttlMs,
			hits: 0,
		});
	}

	/**
	 * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ L1
	 */
	private cleanExpiredL1(): void {
		const now = Date.now();
		let cleaned = 0;

		for (const [key, entry] of this.l1Cache.entries()) {
			if (entry.expiry <= now) {
				this.l1Cache.delete(key);
				cleaned++;
			}
		}

		if (cleaned > 0) {
			logger.info(
				`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ L1 –∫—ç—à–∞`,
				'CACHE',
			);
		}
	}

	/**
	 * –í—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ L1 (LFU - Least Frequently Used)
	 */
	private evictL1(): void {
		const entries = Array.from(this.l1Cache.entries());

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞—â–µ–Ω–∏–π (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
		entries.sort((a, b) => a[1].hits - b[1].hits);

		// –£–¥–∞–ª—è–µ–º 10% –∑–∞–ø–∏—Å–µ–π
		const toEvict = Math.ceil(entries.length * 0.1);

		for (let i = 0; i < toEvict && i < entries.length; i++) {
			this.l1Cache.delete(entries[i][0]);
			this.metrics.evictions++;
		}

		logger.info(`üßπ –í—ã—Ç–µ—Å–Ω–µ–Ω–æ ${toEvict} –∑–∞–ø–∏—Å–µ–π –∏–∑ L1 –∫—ç—à–∞`, 'CACHE');
	}

	/**
	 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
	 */
	private logMetrics(): void {
		const total = this.metrics.l1Hits + this.metrics.l1Misses;
		const l1HitRate =
			total > 0 ? ((this.metrics.l1Hits / total) * 100).toFixed(2) : '0.00';

		const l2Total = this.metrics.l2Hits + this.metrics.l2Misses;
		const l2HitRate =
			l2Total > 0 ? ((this.metrics.l2Hits / l2Total) * 100).toFixed(2) : '0.00';

		logger.info(
			`üìä Cache –º–µ—Ç—Ä–∏–∫–∏: L1(${this.l1Cache.size}/${this.L1_MAX_SIZE}, ${l1HitRate}% hit rate), ` +
				`L2(${l2HitRate}% hit rate), Evictions: ${this.metrics.evictions}`,
			'CACHE',
		);
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
	 */
	public getMetrics() {
		return {
			...this.metrics,
			l1Size: this.l1Cache.size,
			l1MaxSize: this.L1_MAX_SIZE,
			l1HitRate:
				this.metrics.l1Hits / (this.metrics.l1Hits + this.metrics.l1Misses) ||
				0,
			l2HitRate:
				this.metrics.l2Hits / (this.metrics.l2Hits + this.metrics.l2Misses) ||
				0,
		};
	}

	/**
	 * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
	 */
	public async flush(): Promise<void> {
		this.l1Cache.clear();
		await redisService.flushAll();
		logger.info('üßπ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã', 'CACHE');
	}
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 */
export class SpecializedCaches {
	private static cacheService = CacheService.getInstance();

	/**
	 * –ö—ç—à –¥–ª—è –∫–ª—É–±–æ–≤ (–¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏–π)
	 */
	static async getClub<T>(
		clubId: string,
		fetchFn: () => Promise<T>,
	): Promise<T> {
		return this.cacheService.getOrSet(
			`club:${clubId}`,
			fetchFn,
			10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç L1
			60 * 60, // 1 —á–∞—Å L2
		);
	}

	/**
	 * –ö—ç—à –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ (—Å—Ä–µ–¥–Ω–µ–∂–∏–≤—É—â–∏–π)
	 */
	static async getPlayers<T>(
		clubId: string,
		fetchFn: () => Promise<T>,
	): Promise<T> {
		return this.cacheService.getOrSet(
			`players:${clubId}`,
			fetchFn,
			5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç L1
			30 * 60, // 30 –º–∏–Ω—É—Ç L2
		);
	}

	/**
	 * –ö—ç—à –¥–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏–π)
	 */
	static async getImageUrls<T>(
		key: string,
		fetchFn: () => Promise<T>,
	): Promise<T> {
		return this.cacheService.getOrSet(
			`image_urls:${key}`,
			fetchFn,
			30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç L1
			6 * 60 * 60, // 6 —á–∞—Å–æ–≤ L2
		);
	}

	/**
	 * –ö—ç—à –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π)
	 */
	static async getAnalytics<T>(
		key: string,
		fetchFn: () => Promise<T>,
	): Promise<T> {
		return this.cacheService.getOrSet(
			`analytics:${key}`,
			fetchFn,
			2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã L1
			10 * 60, // 10 –º–∏–Ω—É—Ç L2
		);
	}

	/**
	 * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∫–ª—É–±–æ–≤
	 */
	static async invalidateClubs(): Promise<void> {
		await this.cacheService.deletePattern('club:*');
		await this.cacheService.deletePattern('players:*');
	}

	/**
	 * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
	 */
	static async invalidateAnalytics(): Promise<void> {
		await this.cacheService.deletePattern('analytics:*');
	}
}

export const cacheService = CacheService.getInstance();
