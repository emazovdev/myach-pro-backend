import puppeteer, { Browser, Page } from 'puppeteer-core';
import chromium from '@sparticuz/chromium';
import { EventEmitter } from 'events';
import { logger } from '../utils/logger';

interface BrowserInstance {
	browser: Browser;
	pages: Map<string, Page>;
	activePages: number;
	createdAt: number;
	lastUsed: number;
	processingTasks: number;
}

interface PageTaskOptions {
	html: string;
	viewportWidth: number;
	viewportHeight: number;
	quality: number;
	optimizeForSpeed: boolean;
}

/**
 * –ü—É–ª –±—Ä–∞—É–∑–µ—Ä–æ–≤ Puppeteer –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è 500+ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 */
export class PuppeteerPoolService extends EventEmitter {
	private static instance: PuppeteerPoolService;
	private browserPool: Map<string, BrowserInstance> = new Map();
	private availableBrowsers: string[] = [];
	private processingQueue: Array<{
		id: string;
		options: PageTaskOptions;
		resolve: (buffer: Buffer) => void;
		reject: (error: Error) => void;
		createdAt: number;
	}> = [];

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
	private readonly POOL_SIZE = 8; // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤
	private readonly MAX_PAGES_PER_BROWSER = 10; // –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –±—Ä–∞—É–∑–µ—Ä
	private readonly BROWSER_TIMEOUT = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –∂–∏–∑–Ω–∏ –±—Ä–∞—É–∑–µ—Ä–∞
	private readonly PAGE_TIMEOUT = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã –∂–∏–∑–Ω–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	private readonly QUEUE_TIMEOUT = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞ —Ç–∞–π–º–∞—É—Ç –∑–∞–¥–∞—á
	private readonly BROWSER_RESTART_THRESHOLD = 100; // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ 100 –∑–∞–¥–∞—á

	// –ú–µ—Ç—Ä–∏–∫–∏
	private metrics = {
		totalTasksProcessed: 0,
		activeTasks: 0,
		browsersCreated: 0,
		browsersDestroyed: 0,
		averageTaskTime: 0,
		peakConcurrency: 0,
	};

	private isInitialized = false;
	private shutdownInProgress = false;
	private cleanupInterval: NodeJS.Timeout | null = null;

	private constructor() {
		super();
		this.setMaxListeners(1000);
	}

	public static getInstance(): PuppeteerPoolService {
		if (!PuppeteerPoolService.instance) {
			PuppeteerPoolService.instance = new PuppeteerPoolService();
		}
		return PuppeteerPoolService.instance;
	}

	/**
	 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
	 */
	public async initialize(): Promise<void> {
		if (this.isInitialized) return;

		logger.info(
			`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤: ${this.POOL_SIZE} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤`,
			'PUPPETEER_POOL',
		);

		// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
		for (let i = 0; i < Math.min(3, this.POOL_SIZE); i++) {
			try {
				await this.createBrowser();
			} catch (error) {
				logger.error(
					`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ ${i}:`,
					'PUPPETEER_POOL',
					error,
				);
			}
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—á–∏—Å—Ç–∫—É
		this.startCleanupTask();
		this.startQueueProcessor();

		this.isInitialized = true;
		logger.info('‚úÖ –ü—É–ª –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'PUPPETEER_POOL');
	}

	/**
	 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
	 */
	private async createBrowser(): Promise<string> {
		const browserId = `browser_${Date.now()}_${Math.random()
			.toString(36)
			.substr(2, 9)}`;

		const isProduction = process.env.NODE_ENV === 'production';

		// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
		const baseArgs = [
			'--no-sandbox',
			'--disable-setuid-sandbox',
			'--disable-dev-shm-usage',
			'--disable-gpu',
			'--disable-extensions',
			'--disable-plugins',
			'--disable-background-timer-throttling',
			'--disable-backgrounding-occluded-windows',
			'--disable-renderer-backgrounding',
			'--no-first-run',
			'--no-zygote',
			'--single-process',
			'--disable-features=TranslateUI,VizDisplayCompositor',
			'--disable-ipc-flooding-protection',
			'--max-old-space-size=512', // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
			'--memory-reducer',
			'--disable-background-networking',
			'--disable-client-side-phishing-detection',
			'--disable-component-update',
			'--disable-default-apps',
			'--disable-domain-reliability',
			'--disable-features=AudioServiceOutOfProcess',
			'--disable-hang-monitor',
			'--disable-notifications',
			'--disable-print-preview',
			'--disable-sync',
			'--hide-scrollbars',
			'--mute-audio',
			'--no-default-browser-check',
			'--no-pings',
			'--password-store=basic',
			'--use-mock-keychain',
		];

		let browser: Browser;

		try {
			if (isProduction) {
				browser = await puppeteer.launch({
					args: [...chromium.args, ...baseArgs],
					defaultViewport: chromium.defaultViewport,
					executablePath: await chromium.executablePath(),
					headless: chromium.headless,
					timeout: 30000,
				});
			} else {
				browser = await puppeteer.launch({
					headless: true,
					args: baseArgs,
					timeout: 30000,
				});
			}

			const browserInstance: BrowserInstance = {
				browser,
				pages: new Map(),
				activePages: 0,
				createdAt: Date.now(),
				lastUsed: Date.now(),
				processingTasks: 0,
			};

			this.browserPool.set(browserId, browserInstance);
			this.availableBrowsers.push(browserId);
			this.metrics.browsersCreated++;

			logger.info(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${browserId} —Å–æ–∑–¥–∞–Ω`, 'PUPPETEER_POOL');

			// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
			browser.on('disconnected', () => {
				this.handleBrowserDisconnect(browserId);
			});

			return browserId;
		} catch (error) {
			logger.error(
				`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ ${browserId}:`,
				'PUPPETEER_POOL',
				error,
			);
			throw error;
		}
	}

	/**
	 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	 */
	public async generateImage(options: PageTaskOptions): Promise<Buffer> {
		if (this.shutdownInProgress) {
			throw new Error('–°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
		}

		const taskId = `task_${Date.now()}_${Math.random()
			.toString(36)
			.substr(2, 9)}`;

		return new Promise((resolve, reject) => {
			// –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
			this.processingQueue.push({
				id: taskId,
				options,
				resolve,
				reject,
				createdAt: Date.now(),
			});

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
			setTimeout(() => {
				const queueIndex = this.processingQueue.findIndex(
					(task) => task.id === taskId,
				);
				if (queueIndex !== -1) {
					this.processingQueue.splice(queueIndex, 1);
					reject(new Error('–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
				}
			}, this.QUEUE_TIMEOUT);

			// –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
			this.processQueue();
		});
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
	 */
	private async processQueue(): Promise<void> {
		if (this.processingQueue.length === 0) return;

		// –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
		const browserId = await this.getAvailableBrowser();
		if (!browserId) return;

		const task = this.processingQueue.shift();
		if (!task) return;

		try {
			this.metrics.activeTasks++;
			this.metrics.peakConcurrency = Math.max(
				this.metrics.peakConcurrency,
				this.metrics.activeTasks,
			);

			const startTime = Date.now();
			const result = await this.executeTask(browserId, task.options);
			const duration = Date.now() - startTime;

			// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
			this.metrics.totalTasksProcessed++;
			this.metrics.averageTaskTime =
				(this.metrics.averageTaskTime * (this.metrics.totalTasksProcessed - 1) +
					duration) /
				this.metrics.totalTasksProcessed;

			task.resolve(result);

			logger.info(
				`‚úÖ –ó–∞–¥–∞—á–∞ ${task.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${duration}–º—Å`,
				'PUPPETEER_POOL',
			);
		} catch (error) {
			task.reject(error as Error);
			logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ ${task.id}:`, 'PUPPETEER_POOL', error);
		} finally {
			this.metrics.activeTasks--;
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
			setImmediate(() => this.processQueue());
		}
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
	 */
	private async getAvailableBrowser(): Promise<string | null> {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã
		for (const browserId of this.availableBrowsers) {
			const browserInstance = this.browserPool.get(browserId);
			if (
				browserInstance &&
				browserInstance.activePages < this.MAX_PAGES_PER_BROWSER
			) {
				return browserId;
			}
		}

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –ø—É–ª –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
		if (this.browserPool.size < this.POOL_SIZE) {
			try {
				return await this.createBrowser();
			} catch (error) {
				logger.error(
					'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä:',
					'PUPPETEER_POOL',
					error,
				);
			}
		}

		// –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
		return null;
	}

	/**
	 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	 */
	private async executeTask(
		browserId: string,
		options: PageTaskOptions,
	): Promise<Buffer> {
		const browserInstance = this.browserPool.get(browserId);
		if (!browserInstance) {
			throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
		}

		const pageId = `page_${Date.now()}_${Math.random()
			.toString(36)
			.substr(2, 9)}`;
		let page: Page | null = null;

		try {
			browserInstance.activePages++;
			browserInstance.processingTasks++;
			browserInstance.lastUsed = Date.now();

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
			page = await browserInstance.browser.newPage();
			browserInstance.pages.set(pageId, page);

			// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
			if (options.optimizeForSpeed) {
				await page.setRequestInterception(true);
				page.on('request', (req: any) => {
					const resourceType = req.resourceType();
					const url = req.url();

					if (
						resourceType === 'stylesheet' ||
						resourceType === 'font' ||
						resourceType === 'script'
					) {
						if (url.startsWith('http') && !url.startsWith('data:')) {
							req.abort();
							return;
						}
					}

					if (resourceType === 'image') {
						req.continue();
						return;
					}

					req.continue();
				});

				await page.setJavaScriptEnabled(false);
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewport
			const devicePixelRatio =
				options.quality >= 95 ? 2.5 : options.quality >= 90 ? 2 : 1.5;
			await page.setViewport({
				width: options.viewportWidth,
				height: options.viewportHeight,
				deviceScaleFactor: devicePixelRatio,
			});

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
			await page.setContent(options.html, {
				waitUntil: options.optimizeForSpeed
					? 'domcontentloaded'
					: 'networkidle0',
				timeout: 15000,
			});

			if (!options.optimizeForSpeed) {
				await page.evaluateHandle('document.fonts.ready');
			}

			// –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
			const screenshot = await page.screenshot({
				type: 'jpeg',
				quality: Math.max(85, Math.min(100, options.quality)),
				optimizeForSpeed: false,
				clip: {
					x: 0,
					y: 0,
					width: options.viewportWidth,
					height: options.viewportHeight,
				},
			});

			// –í–∞–ª–∏–¥–∞—Ü–∏—è
			if (!screenshot || screenshot.length === 0) {
				throw new Error('–ü—É—Å—Ç–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç');
			}

			const jpegHeader = screenshot.subarray(0, 3);
			const isValidJPEG =
				jpegHeader[0] === 0xff &&
				jpegHeader[1] === 0xd8 &&
				jpegHeader[2] === 0xff;

			if (!isValidJPEG) {
				throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JPEG —Ñ–∞–π–ª');
			}

			return screenshot;
		} finally {
			// –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
			if (page) {
				try {
					await page.close();
					browserInstance.pages.delete(pageId);
				} catch (error) {
					logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', 'PUPPETEER_POOL', error);
				}
			}

			browserInstance.activePages--;
			browserInstance.processingTasks--;

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä
			if (browserInstance.processingTasks >= this.BROWSER_RESTART_THRESHOLD) {
				setImmediate(() => this.destroyBrowser(browserId));
			}
		}
	}

	/**
	 * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
	 */
	private async destroyBrowser(browserId: string): Promise<void> {
		const browserInstance = this.browserPool.get(browserId);
		if (!browserInstance) return;

		try {
			// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			for (const [pageId, page] of browserInstance.pages) {
				try {
					await page.close();
				} catch (error) {
					logger.error(
						`‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`,
						'PUPPETEER_POOL',
						error,
					);
				}
			}

			// –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
			await browserInstance.browser.close();

			// –£–¥–∞–ª—è–µ–º –∏–∑ –ø—É–ª–∞
			this.browserPool.delete(browserId);
			const index = this.availableBrowsers.indexOf(browserId);
			if (index !== -1) {
				this.availableBrowsers.splice(index, 1);
			}

			this.metrics.browsersDestroyed++;
			logger.info(`üóëÔ∏è –ë—Ä–∞—É–∑–µ—Ä ${browserId} —É–Ω–∏—á—Ç–æ–∂–µ–Ω`, 'PUPPETEER_POOL');
		} catch (error) {
			logger.error(
				`‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ ${browserId}:`,
				'PUPPETEER_POOL',
				error,
			);
		}
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
	 */
	private handleBrowserDisconnect(browserId: string): void {
		logger.warn(`‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${browserId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`, 'PUPPETEER_POOL');
		this.destroyBrowser(browserId);
	}

	/**
	 * –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
	 */
	private startCleanupTask(): void {
		this.cleanupInterval = setInterval(() => {
			const now = Date.now();

			for (const [browserId, browserInstance] of this.browserPool) {
				// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
				if (now - browserInstance.createdAt > this.BROWSER_TIMEOUT) {
					logger.info(
						`üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ ${browserId}`,
						'PUPPETEER_POOL',
					);
					this.destroyBrowser(browserId);
					continue;
				}

				// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
				for (const [pageId, page] of browserInstance.pages) {
					if (browserInstance.activePages === 0) {
						page.close().catch(() => {});
						browserInstance.pages.delete(pageId);
					}
				}
			}

			// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
			this.processingQueue = this.processingQueue.filter((task) => {
				if (now - task.createdAt > this.QUEUE_TIMEOUT) {
					task.reject(new Error('–¢–∞–π–º–∞—É—Ç –æ—á–µ—Ä–µ–¥–∏'));
					return false;
				}
				return true;
			});
		}, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	}

	/**
	 * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
	 */
	private startQueueProcessor(): void {
		setInterval(() => {
			if (this.processingQueue.length > 0) {
				this.processQueue();
			}
		}, 100); // –ö–∞–∂–¥—ã–µ 100–º—Å
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
	 */
	public getMetrics() {
		return {
			...this.metrics,
			totalBrowsers: this.browserPool.size,
			availableBrowsers: this.availableBrowsers.length,
			queueSize: this.processingQueue.length,
			totalPages: Array.from(this.browserPool.values()).reduce(
				(sum, b) => sum + b.pages.size,
				0,
			),
		};
	}

	/**
	 * Graceful shutdown
	 */
	public async shutdown(): Promise<void> {
		this.shutdownInProgress = true;
		logger.info(
			'üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã PuppeteerPoolService...',
			'PUPPETEER_POOL',
		);

		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏
		if (this.cleanupInterval) {
			clearInterval(this.cleanupInterval);
		}

		// –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏
		for (const task of this.processingQueue) {
			task.reject(new Error('–°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É'));
		}
		this.processingQueue = [];

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã
		const destroyPromises = Array.from(this.browserPool.keys()).map(
			(browserId) => this.destroyBrowser(browserId),
		);

		await Promise.all(destroyPromises);

		logger.info('‚úÖ PuppeteerPoolService –∑–∞–≤–µ—Ä—à–µ–Ω', 'PUPPETEER_POOL');
	}
}

export const puppeteerPoolService = PuppeteerPoolService.getInstance();
