import { redisService } from './redis.service';
import { logger } from '../utils/logger';
import { testBufferConversion, diagnoseBuffer } from '../utils/bufferTest';

interface ImageTask {
	id: string;
	chatId: number;
	imageBuffer: string; // base64
	caption: string;
	timestamp: number;
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Redis
 * –ò–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å IPC –≤ PM2 cluster mode
 */
export class SimpleBotMessagingService {
	private static instance: SimpleBotMessagingService;
	private botService: any = null;
	private isProcessingTasks = false;
	private taskProcessorInterval: NodeJS.Timeout | null = null;

	private constructor() {
		this.startTaskProcessor();
	}

	public static getInstance(): SimpleBotMessagingService {
		if (!SimpleBotMessagingService.instance) {
			SimpleBotMessagingService.instance = new SimpleBotMessagingService();
		}
		return SimpleBotMessagingService.instance;
	}

	/**
	 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ bot service (—Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ)
	 */
	public setBotService(botService: any) {
		this.botService = botService;
	}

	/**
	 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ
	 */
	private startTaskProcessor() {
		const isMasterProcess = process.env.pm_id === '0';

		if (isMasterProcess && !this.isProcessingTasks) {
			this.isProcessingTasks = true;

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º setInterval –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö setTimeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–µ–∫–∞
			this.taskProcessorInterval = setInterval(async () => {
				if (this.isProcessingTasks) {
					await this.processImageTasks();
				}
			}, 100);
		}
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ)
	 */
	private async processImageTasks() {
		const isMasterProcess = process.env.pm_id === '0';

		if (!isMasterProcess || !this.isProcessingTasks) return;

		try {
			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis –æ—á–µ—Ä–µ–¥–∏ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
			const taskData = await redisService.getClient().lpop('image_send_queue');

			if (taskData) {
				const task: ImageTask = JSON.parse(taskData);
				await this.handleImageTask(task);
			}
		} catch (error) {
			logger.error(
				'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
				'TELEGRAM_BOT',
				error as Error,
			);
		}
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	 */
	private async handleImageTask(task: ImageTask) {
		let success = false;
		let errorMessage = '';

		try {
			if (!this.botService?.isBotAvailable()) {
				errorMessage = 'Bot service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏';
				logger.error(errorMessage, 'TELEGRAM_BOT');
				return;
			}

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ Buffer —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
			let imageBuffer: Buffer;
			try {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å base64 —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
				if (!task.imageBuffer || typeof task.imageBuffer !== 'string') {
					throw new Error(
						'Base64 —Å—Ç—Ä–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π',
					);
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å base64 —Ñ–æ—Ä–º–∞—Ç–∞
				const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
				if (!base64Regex.test(task.imageBuffer)) {
					throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç base64 —Å—Ç—Ä–æ–∫–∏');
				}

				logger.info(
					`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è base64 –≤ Buffer: –¥–ª–∏–Ω–∞ base64=${task.imageBuffer.length}`,
					'TELEGRAM_BOT',
				);

				imageBuffer = Buffer.from(task.imageBuffer, 'base64');

				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
				diagnoseBuffer(imageBuffer, '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ base64');

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
				if (!Buffer.isBuffer(imageBuffer)) {
					throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Buffer');
				}

				if (imageBuffer.length === 0) {
					throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π');
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ base64 –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
				const verificationBase64 = imageBuffer.toString('base64');
				if (verificationBase64 !== task.imageBuffer) {
					throw new Error(
						'–î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞',
					);
				}

				logger.info(
					`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Ä–∞–∑–º–µ—Ä Buffer=${imageBuffer.length}, —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`,
					'TELEGRAM_BOT',
				);
			} catch (conversionError) {
				errorMessage = `–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ base64 –≤ Buffer: ${
					(conversionError as Error).message
				}`;
				logger.error(errorMessage, 'TELEGRAM_BOT', conversionError as Error);
				return;
			}

			// –í–∞–ª–∏–¥–∏—Ä—É–µ–º Buffer –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
			if (!this.validateImageBuffer(imageBuffer)) {
				errorMessage = 'Buffer –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ base64';
				logger.error(errorMessage, 'TELEGRAM_BOT');
				return;
			}

			const imageSizeMB = imageBuffer.length / (1024 * 1024);

			logger.info(
				`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSizeMB.toFixed(
					2,
				)}MB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${task.chatId}`,
				'TELEGRAM_BOT',
			);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (TelegramBotService —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)
			success = await this.botService.sendImage(
				task.chatId,
				imageBuffer,
				task.caption,
			);

			logger.imageSent(success, task.chatId.toString(), imageBuffer.length);
		} catch (error) {
			errorMessage = error instanceof Error ? error.message : String(error);
			logger.error(
				'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–µ',
				'TELEGRAM_BOT',
				error as Error,
			);
			logger.imageSent(false, task.chatId.toString());
		} finally {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Redis –¥–ª—è worker –ø—Ä–æ—Ü–µ—Å—Å–∞
			try {
				await redisService.getClient().setex(
					`image_result:${task.id}`,
					60, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TTL –¥–æ 60 —Å–µ–∫—É–Ω–¥
					JSON.stringify({
						success,
						timestamp: Date.now(),
						error: errorMessage || undefined,
					}),
				);
			} catch (redisError) {
				logger.error(
					'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Redis',
					'TELEGRAM_BOT',
					redisError as Error,
				);
			}
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
	 */
	public async sendImage(
		chatId: number,
		imageBuffer: Buffer,
		caption: string,
	): Promise<boolean> {
		// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Buffer
		if (!this.validateImageBuffer(imageBuffer)) {
			logger.error(
				'‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π Buffer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SimpleBotMessagingService',
				'TELEGRAM_BOT',
			);
			return false;
		}

		const isMasterProcess = process.env.pm_id === '0';

		// –ï—Å–ª–∏ –º—ã –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
		if (isMasterProcess && this.botService?.isBotAvailable()) {
			try {
				logger.info(
					`üéØ –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`,
					'TELEGRAM_BOT',
				);

				const result = await this.botService.sendImage(
					chatId,
					imageBuffer,
					caption,
				);
				logger.imageSent(result, chatId.toString(), imageBuffer.length);
				return result;
			} catch (error) {
				logger.error(
					'‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ master –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å',
					'TELEGRAM_BOT',
					error as Error,
				);
				// –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false —Å—Ä–∞–∑—É, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –∫–∞–∫ fallback
			}
		}

		// –ï—Å–ª–∏ –º—ã –≤ worker –ø—Ä–æ—Ü–µ—Å—Å–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis –æ—á–µ—Ä–µ–¥—å
		try {
			const taskId = `${Date.now()}-${Math.random()}`;

			// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Buffer –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ base64
			logger.info(
				`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏: Buffer —Ä–∞–∑–º–µ—Ä=${
					imageBuffer.length
				}, –≤–∞–ª–∏–¥–Ω—ã–π=${Buffer.isBuffer(imageBuffer)}`,
				'TELEGRAM_BOT',
			);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
			const jpegHeader = imageBuffer.subarray(0, 3);
			const isValidJPEG =
				jpegHeader[0] === 0xff &&
				jpegHeader[1] === 0xd8 &&
				jpegHeader[2] === 0xff;

			if (!isValidJPEG) {
				logger.error(
					`‚ùå Buffer —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JPEG –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ base64: ${jpegHeader.toString(
						'hex',
					)}`,
					'TELEGRAM_BOT',
				);
				return false;
			}

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
			let base64String: string;
			try {
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
				const conversionTest = testBufferConversion(
					imageBuffer,
					'–∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
				);
				if (!conversionTest) {
					logger.error(
						'‚ùå –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Buffer ‚Üí base64 ‚Üí Buffer –ø—Ä–æ–≤–∞–ª–µ–Ω',
						'TELEGRAM_BOT',
					);
					return false;
				}

				base64String = imageBuffer.toString('base64');

				if (!base64String || base64String.length === 0) {
					throw new Error('–ü—É—Å—Ç–∞—è base64 —Å—Ç—Ä–æ–∫–∞');
				}

				logger.info(
					`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64 —É—Å–ø–µ—à–Ω–∞: –¥–ª–∏–Ω–∞=${base64String.length}`,
					'TELEGRAM_BOT',
				);
			} catch (base64Error) {
				logger.error(
					'‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Buffer –≤ base64',
					'TELEGRAM_BOT',
					base64Error as Error,
				);
				return false;
			}

			const task: ImageTask = {
				id: taskId,
				chatId,
				imageBuffer: base64String,
				caption,
				timestamp: Date.now(),
			};

			// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
			await redisService
				.getClient()
				.rpush('image_send_queue', JSON.stringify(task));

			// –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å–∏–º—É–º 45 —Å–µ–∫—É–Ω–¥ - —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏)
			for (let i = 0; i < 450; i++) {
				const result = await redisService
					.getClient()
					.get(`image_result:${taskId}`);
				if (result) {
					const parsed = JSON.parse(result);
					await redisService.getClient().del(`image_result:${taskId}`);
					logger.imageSent(
						parsed.success === true,
						chatId.toString(),
						imageBuffer.length,
					);
					return parsed.success === true;
				}
				await new Promise((resolve) => setTimeout(resolve, 100));
			}

			logger.error(
				'–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
				'TELEGRAM_BOT',
			);
			logger.imageSent(false, chatId.toString());
			return false;
		} catch (error) {
			logger.error(
				'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å',
				'TELEGRAM_BOT',
				error as Error,
			);
			logger.imageSent(false, chatId.toString());
			return false;
		}
	}

	/**
	 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Buffer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
	 */
	private validateImageBuffer(buffer: Buffer): boolean {
		try {
			logger.info(
				`üîç –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Buffer: buffer=${!!buffer}, —Ç–∏–ø=${typeof buffer}`,
				'TELEGRAM_BOT',
			);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Buffer —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
			if (!buffer) {
				logger.error('‚ùå Buffer –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (null/undefined)', 'TELEGRAM_BOT');
				return false;
			}

			if (!Buffer.isBuffer(buffer)) {
				logger.error(
					`‚ùå –û–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Buffer, —Ç–∏–ø: ${typeof buffer}${
						buffer
							? `, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${
									(buffer as any).constructor?.name || 'unknown'
							  }`
							: ''
					}`,
					'TELEGRAM_BOT',
				);
				return false;
			}

			if (buffer.length === 0) {
				logger.error('‚ùå Buffer –ø—É—Å—Ç–æ–π (–¥–ª–∏–Ω–∞ = 0)', 'TELEGRAM_BOT');
				return false;
			}

			logger.info(
				`‚úÖ Buffer –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞: –¥–ª–∏–Ω–∞=${buffer.length}`,
				'TELEGRAM_BOT',
			);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (1KB)
			if (buffer.length < 1024) {
				logger.error(
					`‚ùå Buffer —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: ${buffer.length} –±–∞–π—Ç`,
					'TELEGRAM_BOT',
				);
				return false;
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (20MB)
			const sizeMB = buffer.length / (1024 * 1024);
			if (sizeMB > 20) {
				logger.error(
					`‚ùå Buffer —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${sizeMB.toFixed(2)}MB`,
					'TELEGRAM_BOT',
				);
				return false;
			}

			logger.info(
				`‚úÖ Buffer —Ä–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω: ${sizeMB.toFixed(2)}MB`,
				'TELEGRAM_BOT',
			);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫
			const jpegHeader = buffer.subarray(0, 3);
			const isValidJPEG =
				jpegHeader[0] === 0xff &&
				jpegHeader[1] === 0xd8 &&
				jpegHeader[2] === 0xff;

			if (!isValidJPEG) {
				logger.error(
					`‚ùå Buffer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JPEG –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${jpegHeader.toString('hex')}`,
					'TELEGRAM_BOT',
				);
				return false;
			}

			logger.info(
				`‚úÖ Buffer –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª–∏–¥–µ–Ω: ${sizeMB.toFixed(
					2,
				)}MB, JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`,
				'TELEGRAM_BOT',
			);

			return true;
		} catch (error) {
			logger.error(
				'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Buffer:',
				'TELEGRAM_BOT',
				error as Error,
			);
			return false;
		}
	}

	/**
	 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
	 */
	public stop() {
		this.isProcessingTasks = false;

		if (this.taskProcessorInterval) {
			clearInterval(this.taskProcessorInterval);
			this.taskProcessorInterval = null;
		}
	}
}

export const simpleBotMessagingService =
	SimpleBotMessagingService.getInstance();
