import { NextFunction, Response } from 'express'
import { invalidateAllAdminCache } from '../middleware/checkAdminRole'
import { prisma } from '../prisma'
import { AdminService } from '../services/admin.service'
import { redisService } from '../services/redis.service'
import { TelegramRequest } from '../types/api'
import {
	invalidateAllDataCache,
	invalidateAnalyticsCache,
	invalidateClubsCache,
} from '../utils/cacheUtils'

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
 */
export const getAdmins = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		const admins = await AdminService.getAdmins()
		res.json({ ok: true, admins })
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
 */
export const addAdmin = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		const { telegramUser } = req.body
		const { telegramId, username } = req.body

		if (!telegramId) {
			res.status(400).json({ error: 'telegram_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
			return
		}

		if (!telegramUser) {
			res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' })
			return
		}

		const addedBy = telegramUser.id.toString()
		const result = await AdminService.addAdmin(
			telegramId,
			username || null,
			addedBy
		)

		if (result.success) {
			// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: AdminService —É–∂–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—ç—à –∞–¥–º–∏–Ω–∞,
			// –∑–¥–µ—Å—å –º—ã –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—â–∏–µ –∫—ç—à–∏ –¥–∞–Ω–Ω—ã—Ö
			await invalidateAllDataCache()
			res.json({ ok: true, message: result.message })
		} else {
			res.status(400).json({ error: result.message })
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
}

/**
 * –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
 */
export const removeAdmin = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		const { telegramUser } = req.body
		const { telegramId } = req.params

		if (!telegramId) {
			res.status(400).json({ error: 'telegram_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
			return
		}

		if (!telegramUser) {
			res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' })
			return
		}

		const removedBy = telegramUser.id.toString()
		const result = await AdminService.removeAdmin(telegramId, removedBy)

		if (result.success) {
			// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: AdminService —É–∂–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—ç—à –∞–¥–º–∏–Ω–∞,
			// –∑–¥–µ—Å—å –º—ã –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—â–∏–µ –∫—ç—à–∏ –¥–∞–Ω–Ω—ã—Ö
			await invalidateAllDataCache()
			res.json({ ok: true, message: result.message })
		} else {
			res.status(400).json({ error: result.message })
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username
 */
export const searchUsers = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		const { telegramUser } = req.body
		const { query } = req.query

		if (!query || typeof query !== 'string') {
			res.status(400).json({ error: '–ü–∞—Ä–∞–º–µ—Ç—Ä query –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
			return
		}

		if (!telegramUser) {
			res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' })
			return
		}

		const requestedBy = telegramUser.id.toString()
		const result = await AdminService.searchUsersByUsername(query, requestedBy)

		if (result.success) {
			res.json({ ok: true, users: result.users })
		} else {
			res.status(400).json({ error: result.message })
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ username
 */
export const addAdminByUsername = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		const { telegramUser } = req.body
		const { username } = req.body

		if (!username) {
			res.status(400).json({ error: 'username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
			return
		}

		if (!telegramUser) {
			res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' })
			return
		}

		const addedBy = telegramUser.id.toString()
		const result = await AdminService.addAdminByUsername(username, addedBy)

		if (result.success) {
			// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: AdminService —É–∂–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—ç—à –∞–¥–º–∏–Ω–∞,
			// –∑–¥–µ—Å—å –º—ã –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—â–∏–µ –∫—ç—à–∏ –¥–∞–Ω–Ω—ã—Ö
			await invalidateAllDataCache()
			res.json({ ok: true, message: result.message })
		} else {
			res.status(400).json({ error: result.message })
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ –ø–æ username:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à –∫–ª—É–±–æ–≤ –∏ –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export const clearClubsCache = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		await invalidateClubsCache()

		res.json({
			ok: true,
			message: '–ö–µ—à –∫–ª—É–±–æ–≤ –∏ –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω',
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞ –∫–ª—É–±–æ–≤:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞' })
	}
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥
 */
export const cleanupOrphanedStatistics = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')

		let totalDeletedStats = 0

		await prisma.$transaction(async (tx: any) => {
			// 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
			const orphanedByPlayers = await tx.playerStatistics.findMany({
				where: {
					player: null,
				},
				select: {
					id: true,
					playerId: true,
					categoryName: true,
				},
			})

			if (orphanedByPlayers.length > 0) {
				console.log(
					`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${orphanedByPlayers.length} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏`
				)

				const deletedByPlayers = await tx.playerStatistics.deleteMany({
					where: {
						id: {
							in: orphanedByPlayers.map((stat: any) => stat.id),
						},
					},
				})

				console.log(
					`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedByPlayers.count} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏`
				)
				totalDeletedStats += deletedByPlayers.count
			}

			// 2. –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
			const orphanedByClubs = await tx.playerStatistics.findMany({
				where: {
					club: null,
				},
				select: {
					id: true,
					clubId: true,
					categoryName: true,
				},
			})

			if (orphanedByClubs.length > 0) {
				console.log(
					`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${orphanedByClubs.length} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏`
				)

				const deletedByClubs = await tx.playerStatistics.deleteMany({
					where: {
						id: {
							in: orphanedByClubs.map((stat: any) => stat.id),
						},
					},
				})

				console.log(
					`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedByClubs.count} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏`
				)
				totalDeletedStats += deletedByClubs.count
			}

			// 3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ NOT EXISTS
			const orphanedStatsAlternative = (await tx.$queryRaw`
				SELECT ps.id, ps.player_id, ps.club_id, ps.category_name
				FROM player_statistics ps
				LEFT JOIN players p ON ps.player_id = p.id
				LEFT JOIN clubs c ON ps.club_id = c.id
				WHERE p.id IS NULL OR c.id IS NULL
			`) as Array<{
				id: string
				player_id: string
				club_id: string
				category_name: string
			}>

			if (orphanedStatsAlternative.length > 0) {
				console.log(
					`üóëÔ∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞–π–¥–µ–Ω–æ ${orphanedStatsAlternative.length} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫`
				)

				const deletedAlternative = await tx.playerStatistics.deleteMany({
					where: {
						id: {
							in: orphanedStatsAlternative.map((stat: any) => stat.id),
						},
					},
				})

				console.log(
					`‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–¥–∞–ª–µ–Ω–æ ${deletedAlternative.count} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫`
				)
				totalDeletedStats += deletedAlternative.count
			}
		})

		// –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
		await invalidateClubsCache()
		console.log('üîÑ –ö—ç—à –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫')

		console.log(
			`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ ${totalDeletedStats} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`
		)

		res.json({
			ok: true,
			message: '–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã',
			deletedCount: totalDeletedStats,
		})
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫:', error)
		res.status(500).json({
			error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫',
			details: (error as Error).message,
		})
	}
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export const clearAnalyticsCache = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		await invalidateAnalyticsCache()

		res.json({
			ok: true,
			message: '–ö–µ—à –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω',
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞' })
	}
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export const clearAllCache = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction
): Promise<void> => {
	try {
		// –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∫—ç—à–∞ –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω—Å–∫–∏–π
		await Promise.all([
			redisService.flushAll(),
			invalidateAllAdminCache(), // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫—ç—à
		])

		res.json({
			ok: true,
			message: '–í–µ—Å—å –∫–µ—à –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω—Å–∫–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω',
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞' })
	}
}
