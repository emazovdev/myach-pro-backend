import { Response, NextFunction } from 'express';
import { TelegramRequest, PlayerWithSignedUrl } from '../types/api';
import { prisma } from '../prisma';
import { StorageService } from '../services/storage.service';
import { invalidateCache, invalidateClubsCache } from '../utils/cacheUtils';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const storageService = new StorageService();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—É–±–æ–≤ (—Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤–ª–∏—è—é—Ç –Ω–∞ –∫—ç—à –∫–ª—É–±–æ–≤)
const CLUB_CACHE_KEYS = {
	ALL_CLUBS: 'cache:clubs:all',
	CLUB_BY_ID: 'cache:clubs:id:',
	CLUBS_WITH_PLAYERS: 'cache:clubs:with_players:',
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 */
export const createPlayer = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	const startTime = Date.now();

	try {
		const { name, clubId } = req.body;
		const file = req.file;

		console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: ${name} –¥–ª—è –∫–ª—É–±–∞ ${clubId}`, {
			hasFile: !!file,
			fileSize: file?.size,
			timestamp: new Date().toISOString(),
		});

		if (!name || !clubId) {
			res.status(400).json({ error: '–ò–º—è –∏ –∫–ª—É–± –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
			return;
		}

		// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 1: –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
		const [club, existingPlayer] = await Promise.all([
			prisma.club.findUnique({
				where: { id: clubId },
				select: { id: true }, // –¢–æ–ª—å–∫–æ ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
			}),
			prisma.players.findFirst({
				where: { name, clubId },
				select: { id: true },
			}),
		]);

		if (!club) {
			res.status(400).json({ error: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª—É–± –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
			return;
		}

		if (existingPlayer) {
			res.status(400).json({
				error: '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º –∫–ª—É–±–µ',
			});
			return;
		}

		// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
		const player = await prisma.players.create({
			data: {
				name,
				avatar: '', // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π, –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
				clubId,
			},
			select: {
				id: true,
				name: true,
			},
		});

		console.log(`‚úÖ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –≤ –ë–î: ${player.id}`, {
			duration: Date.now() - startTime,
		});

		// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		res.status(201).json({
			ok: true,
			player: {
				id: player.id,
				name: player.name,
				avatarUrl: '', // –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π, –∞–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
			},
		});

		// –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Ñ–æ–Ω–µ
		if (file) {
			// –ù–ï –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
			Promise.all([
				// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
				storageService.uploadFile(file, 'players').then(async (avatarKey) => {
					console.log(`üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${avatarKey}`);

					// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–≥—Ä–æ–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
					await prisma.players.update({
						where: { id: player.id },
						data: { avatar: avatarKey },
					});

					console.log(`üñºÔ∏è –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${player.id}`);
					return avatarKey;
				}),

				// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
				invalidateClubsCache(),
			]).catch((error: any) => {
				// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
				console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', {
					playerId: player.id,
					error: error?.message || String(error),
				});
			});
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞, —Ç–æ–ª—å–∫–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
			invalidateClubsCache().catch((error: any) => {
				console.error(
					'‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞:',
					error?.message || String(error),
				);
			});
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		const duration = Date.now() - startTime;
		console.log(`‚è±Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${duration}ms`);

		if (duration > 500) {
			console.warn(
				`üêå –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: ${duration}ms (–æ–∂–∏–¥–∞–µ–º–æ <500ms)`,
			);
		}
	} catch (err: any) {
		const duration = Date.now() - startTime;
		console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ (${duration}ms):`, {
			error: err.message,
			stack: err.stack,
		});
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞' });
	}
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
 */
export const getAllPlayers = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	try {
		const players = await prisma.players.findMany({
			include: {
				club: {
					select: {
						id: true,
						name: true,
					},
				},
			},
		});

		// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏
		const avatarKeys = players
			.map((player) => player.avatar)
			.filter(Boolean) as string[];

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ URL –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
		const avatarUrls = await storageService.getBatchFastUrls(
			avatarKeys,
			'avatar',
		);

		// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ URL
		const formattedPlayers = players.map((player) => ({
			id: player.id,
			name: player.name,
			avatarUrl: player.avatar ? avatarUrls[player.avatar] || '' : '',
		}));

		res.json({
			ok: true,
			players: formattedPlayers,
		});
	} catch (err: any) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤:', err);
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤' });
	}
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∏–≥—Ä–æ–∫–µ –ø–æ ID
 */
export const getPlayerById = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	try {
		const { id } = req.params;

		if (!id) {
			res.status(400).json({ error: 'ID –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
			return;
		}

		const player = await prisma.players.findUnique({
			where: {
				id,
			},
			include: {
				club: {
					select: {
						id: true,
						name: true,
					},
				},
			},
		});

		if (!player) {
			res.status(404).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
			return;
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
		const avatarUrl = player.avatar
			? await storageService.getFastImageUrl(player.avatar, 'avatar')
			: '';

		res.json({
			ok: true,
			player: {
				id: player.id,
				name: player.name,
				avatarUrl,
				club: player.club
					? {
							id: player.club.id,
							name: player.club.name,
					  }
					: null,
			},
		});
	} catch (err: any) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:', err);
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞' });
	}
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 */
export const updatePlayer = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	const startTime = Date.now();

	try {
		const { id } = req.params;
		const { name, clubId } = req.body;
		const file = req.file;

		console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: ${id}`, {
			name,
			clubId,
			hasFile: !!file,
			fileSize: file?.size,
			timestamp: new Date().toISOString(),
		});

		if (!id) {
			res.status(400).json({ error: 'ID –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
			return;
		}

		// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
		const [player, club] = await Promise.all([
			prisma.players.findUnique({
				where: { id },
				select: { id: true, name: true, avatar: true, clubId: true },
			}),
			clubId
				? prisma.club.findUnique({
						where: { id: clubId },
						select: { id: true },
				  })
				: Promise.resolve(true),
		]);

		if (!player) {
			res.status(404).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
			return;
		}

		if (clubId && !club) {
			res.status(400).json({ error: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª—É–± –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
			return;
		}

		// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–ï–ó –∞–≤–∞—Ç–∞—Ä–∞
		const updatedPlayer = await prisma.players.update({
			where: { id },
			data: {
				name: name || player.name,
				clubId: clubId || player.clubId,
				// avatar –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∫–∞ –ø—Ä–µ–∂–Ω–∏–π
			},
			include: {
				club: {
					select: {
						id: true,
						name: true,
					},
				},
			},
		});

		console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${id}`, {
			duration: Date.now() - startTime,
		});

		// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		res.json({
			ok: true,
			player: {
				id: updatedPlayer.id,
				name: updatedPlayer.name,
				avatarUrl: player.avatar
					? await storageService.getFastImageUrl(player.avatar, 'avatar')
					: '',
				club: updatedPlayer.club
					? {
							id: updatedPlayer.club.id,
							name: updatedPlayer.club.name,
					  }
					: null,
			},
		});

		// –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Ñ–æ–Ω–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		if (file) {
			Promise.resolve().then(async () => {
				try {
					console.log(`üìÅ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${id}`);

					// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
					const newAvatarKey = await storageService.uploadFile(file, 'players');
					console.log(`üìÅ –ù–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: ${newAvatarKey}`);

					// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä (–µ—Å–ª–∏ –±—ã–ª)
					if (player.avatar) {
						try {
							await storageService.deleteFile(player.avatar);
							console.log(`üóëÔ∏è –°—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω: ${player.avatar}`);
						} catch (error: any) {
							console.error(
								'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:',
								error?.message || String(error),
							);
						}
					}

					// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å –Ω–æ–≤—ã–º –∞–≤–∞—Ç–∞—Ä–æ–º
					await prisma.players.update({
						where: { id },
						data: { avatar: newAvatarKey },
					});

					console.log(`üñºÔ∏è –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${id}`);
				} catch (error: any) {
					console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:', {
						playerId: id,
						error: error?.message || String(error),
					});
				}
			});
		}

		// –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –≤ —Ñ–æ–Ω–µ
		invalidateClubsCache().catch((error: any) => {
			console.error(
				'‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:',
				error?.message || String(error),
			);
		});

		// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		const duration = Date.now() - startTime;
		console.log(`‚è±Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${duration}ms`);

		if (duration > 500) {
			console.warn(
				`üêå –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: ${duration}ms (–æ–∂–∏–¥–∞–µ–º–æ <500ms)`,
			);
		}
	} catch (err: any) {
		const duration = Date.now() - startTime;
		console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ (${duration}ms):`, {
			error: err.message,
			stack: err.stack,
		});
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞' });
	}
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
 */
export const deletePlayer = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	try {
		const { id } = req.params;

		if (!id) {
			res.status(400).json({ error: 'ID –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
		const player = await prisma.players.findUnique({
			where: {
				id,
			},
		});

		if (!player) {
			res.status(404).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
			return;
		}

		// –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –±—ã–ª –∞–≤–∞—Ç–∞—Ä, —É–¥–∞–ª—è–µ–º –µ–≥–æ
		if (player.avatar) {
			try {
				await storageService.deleteFile(player.avatar);
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
				// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
			}
		}

		// –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
		await prisma.players.delete({
			where: { id },
		});

		// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–ª—É–±–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–∞–∫ –∫–∞–∫ —É–¥–∞–ª–∏–ª—Å—è –∏–≥—Ä–æ–∫
		await invalidateClubsCache();

		res.json({
			ok: true,
			message: '–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
		});
	} catch (err: any) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:', err);
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞' });
	}
};
