import { Response, NextFunction } from 'express';
import {
	TelegramRequest,
	ClubWithSignedUrl,
	PlayerWithSignedUrl,
} from '../types/api';
import { prisma } from '../prisma';
import { StorageService } from '../services/storage.service';
import {
	withCache,
	invalidateCache,
	invalidateClubsCache,
	createCacheOptions,
} from '../utils/cacheUtils';
import { isUserAdmin, getTelegramIdFromRequest } from '../utils/roleUtils';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const storageService = new StorageService();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_KEYS = {
	ALL_CLUBS: 'cache:clubs:all',
	CLUB_BY_ID: 'cache:clubs:id:',
	CLUBS_WITH_PLAYERS: 'cache:clubs:with_players:',
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—É–±–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 */
export const createClub = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	try {
		const { name } = req.body;
		const file = req.file;

		if (!name) {
			res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
			return;
		}

		const isClubExists = await prisma.club.findFirst({
			where: {
				name,
			},
		});

		if (isClubExists) {
			res.status(400).json({ error: '–ö–ª—É–± —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
			return;
		}

		// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∫–ª—É–± –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞
		if (!file) {
			const club = await prisma.club.create({
				data: {
					name,
					logo: '',
				},
			});

			// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏
			await invalidateClubsCache();

			res.status(201).json({
				ok: true,
				club: {
					id: club.id,
					name: club.name,
					logoUrl: '',
				},
			});
			return;
		}

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ R2 –∏ –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ñ–∞–π–ª–∞
		const logoKey = await storageService.uploadFile(file, 'clubs');

		// –°–æ–∑–¥–∞–µ–º –∫–ª—É–± —Å –∫–ª—é—á–æ–º –ª–æ–≥–æ—Ç–∏–ø–∞
		const club = await prisma.club.create({
			data: {
				name,
				logo: logoKey,
			},
		});

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–æ—Ç–∏–ø—É
		const logoUrl = club.logo
			? await storageService.getFastImageUrl(club.logo, 'logo')
			: '';

		// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏
		await invalidateClubsCache();

		res.status(201).json({
			ok: true,
			club: {
				id: club.id,
				name: club.name,
				logoUrl,
			},
		});
	} catch (err: any) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—É–±–∞:', err);
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—É–±–∞' });
	}
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–ª—É–±–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
 */
export const getAllClubs = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
		const telegramId = getTelegramIdFromRequest(req);
		const isAdmin = telegramId ? await isUserAdmin(telegramId) : false;

		// –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const cacheOptions = createCacheOptions(isAdmin, { ttl: 3600 });

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª—É–±–æ–≤
		const formattedClubs = await withCache(
			async () => {
				const clubs = await prisma.club.findMany({
					orderBy: { name: 'asc' },
				});

				// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –¥–ª—è –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏
				const logoKeys = clubs
					.map((club) => club.logo)
					.filter(Boolean) as string[];

				// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ URL –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
				const logoUrls = await storageService.getBatchFastUrls(
					logoKeys,
					'logo',
				);

				// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ URL
				const result = clubs.map((club) => ({
					id: club.id,
					name: club.name,
					logoUrl: club.logo ? logoUrls[club.logo] || '' : '',
				}));

				return result;
			},
			CACHE_KEYS.ALL_CLUBS,
			cacheOptions,
		);

		res.json({
			ok: true,
			clubs: formattedClubs,
		});
	} catch (err: any) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—É–±–æ–≤:', {
			error: err.message,
			stack: err.stack,
			timestamp: new Date().toISOString(),
		});
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—É–±–æ–≤' });
	}
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª—É–±–µ –ø–æ ID
 */
export const getClubById = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	try {
		const { id } = req.params;

		if (!id) {
			res.status(400).json({ error: 'ID –∫–ª—É–±–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
		const telegramId = getTelegramIdFromRequest(req);
		const isAdmin = telegramId ? await isUserAdmin(telegramId) : false;

		// –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const cacheOptions = createCacheOptions(isAdmin, { ttl: 3600 });

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ
		const clubData = await withCache(
			async () => {
				const club = await prisma.club.findUnique({
					where: {
						id,
					},
					include: {
						players: {
							orderBy: { name: 'asc' },
						},
					},
				});

				if (!club) {
					return null;
				}

				// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏
				const logoKey = club.logo ? [club.logo] : [];
				const avatarKeys = club.players
					.map((player) => player.avatar)
					.filter(Boolean) as string[];

				// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ URL –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
				const [logoUrls, avatarUrls] = await Promise.all([
					storageService.getBatchFastUrls(logoKey, 'logo'),
					storageService.getBatchFastUrls(avatarKeys, 'avatar'),
				]);

				// URL –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
				const logoUrl = club.logo ? logoUrls[club.logo] || '' : '';

				// –ò–≥—Ä–æ–∫–∏ —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
				const players = club.players.map((player) => ({
					id: player.id,
					name: player.name,
					avatarUrl: player.avatar ? avatarUrls[player.avatar] || '' : '',
				}));

				return {
					id: club.id,
					name: club.name,
					logoUrl,
					players,
				};
			},
			`${CACHE_KEYS.CLUB_BY_ID}${id}`,
			cacheOptions,
		);

		if (!clubData) {
			res.status(404).json({ error: '–ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω' });
			return;
		}

		res.json({
			ok: true,
			club: clubData,
		});
	} catch (err: any) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—É–±–∞:', err);
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—É–±–∞' });
	}
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 */
export const updateClub = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	try {
		const { id } = req.params;
		const { name } = req.body;
		const file = req.file;

		if (!id) {
			res.status(400).json({ error: 'ID –∫–ª—É–±–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—É–±–∞
		const club = await prisma.club.findUnique({
			where: {
				id,
			},
		});

		if (!club) {
			res.status(404).json({ error: '–ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω' });
			return;
		}

		let logoKey = club.logo;

		// –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
		if (file) {
			// –ï—Å–ª–∏ —É –∫–ª—É–±–∞ —É–∂–µ –±—ã–ª –ª–æ–≥–æ—Ç–∏–ø, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
			if (club.logo) {
				try {
					await storageService.deleteFile(club.logo);
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞:', error);
					// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
				}
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
			logoKey = await storageService.uploadFile(file, 'clubs');
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—É–±–∞
		const updatedClub = await prisma.club.update({
			where: {
				id,
			},
			data: {
				name: name || club.name,
				logo: logoKey,
			},
		});

		// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏
		await invalidateClubsCache();

		// URL –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
		const logoUrl = updatedClub.logo
			? await storageService.getFastImageUrl(updatedClub.logo, 'logo')
			: '';

		res.json({
			ok: true,
			club: {
				id: updatedClub.id,
				name: updatedClub.name,
				logoUrl,
			},
		});
	} catch (err: any) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—É–±–∞:', err);
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—É–±–∞' });
	}
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—É–±–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 */
export const deleteClub = async (
	req: TelegramRequest,
	res: Response,
	next: NextFunction,
): Promise<void> => {
	try {
		const { id } = req.params;

		if (!id) {
			res.status(400).json({ error: 'ID –∫–ª—É–±–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—É–±–∞
		const club = await prisma.club.findUnique({
			where: {
				id,
			},
			include: {
				players: true,
				playerStatistics: true, // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
			},
		});

		if (!club) {
			res.status(404).json({ error: '–ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω' });
			return;
		}

		console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—É–±–∞: ${club.name} (ID: ${id})`);
		console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${club.players.length} –∏–≥—Ä–æ–∫–æ–≤ –∏ ${club.playerStatistics.length} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);

		// –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
		await prisma.$transaction(async (tx) => {
			// 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
			const deletedStatsCount = await tx.playerStatistics.deleteMany({
				where: {
					clubId: id,
				},
			});
			console.log(`üìä –£–¥–∞–ª–µ–Ω–æ ${deletedStatsCount.count} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–ª—É–±–∞ ${id}`);

			// 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–ª—É–±–∞ (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫)
			if (club.players.length > 0) {
				const deletedPlayersCount = await tx.players.deleteMany({
					where: {
						clubId: id,
					},
				});
				console.log(`üë• –£–¥–∞–ª–µ–Ω–æ ${deletedPlayersCount.count} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–ª—É–±–∞ ${id}`);
			}

			// 3. –û–±–Ω—É–ª—è–µ–º clubId –≤ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É–¥–∞–ª—è–µ–º—ã–º –∫–ª—É–±–æ–º
			// –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—É–±" –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
			const updatedSessionsCount = await tx.gameSession.updateMany({
				where: {
					clubId: id,
				},
				data: {
					clubId: null,
				},
			});
			console.log(`üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedSessionsCount.count} –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∫–ª—É–±–∞ ${id}`);

			// 4. –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–ª—É–±
			await tx.club.delete({
				where: {
					id,
				},
			});
			console.log(`üèüÔ∏è –ö–ª—É–± ${club.name} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
		});

		// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
		// –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ñ–∞–π–ª—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è (—á—Ç–æ –ª—É—á—à–µ —á–µ–º –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ)
		
		// –£–¥–∞–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã –∏–≥—Ä–æ–∫–æ–≤
		if (club.players.length > 0) {
			console.log(`üñºÔ∏è –£–¥–∞–ª—è–µ–º ${club.players.length} –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤...`);
			let deletedAvatarsCount = 0;
			for (const player of club.players) {
				if (player.avatar) {
					try {
						await storageService.deleteFile(player.avatar);
						deletedAvatarsCount++;
					} catch (error) {
						console.error(
							`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –∏–≥—Ä–æ–∫–∞ ${player.name} (${player.id}):`,
							error,
						);
						// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
					}
				}
			}
			console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedAvatarsCount} –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤`);
		}

		// –£–¥–∞–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–ª—É–±–∞
		if (club.logo) {
			try {
				await storageService.deleteFile(club.logo);
				console.log(`üè∑Ô∏è –õ–æ–≥–æ—Ç–∏–ø –∫–ª—É–±–∞ ${club.name} —É–¥–∞–ª–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
			} catch (error) {
				console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–ª—É–±–∞ ${club.name}:`, error);
				// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
			}
		}

		// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏
		await invalidateClubsCache();
		console.log(`üîÑ –ö—ç—à –∫–ª—É–±–æ–≤ –æ—á–∏—â–µ–Ω`);

		console.log(`‚úÖ –ö–ª—É–± ${club.name} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã`);

		res.json({
			ok: true,
			message: '–ö–ª—É–±, –∏–≥—Ä–æ–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã',
			deletedData: {
				club: club.name,
				playersCount: club.players.length,
				statisticsCount: club.playerStatistics.length,
			},
		});
	} catch (err: any) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—É–±–∞:', err);
		res.status(500).json({ 
			error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—É–±–∞',
			details: err.message 
		});
	}
};
